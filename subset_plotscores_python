# importing python modules
# (INSERT PACKAGES)
import numpy as np
import pandas as pd 
import scipy as sp
# pandas - creating dataframe
import scanpy as sc
# single cell package
from anndata import read_h5ad
import anndata
from plotnine import *
# graphing package 
from plotnine.data import mtcars 
import glob
# heat map
import seaborn as sns

# magic function, important for plotting
%matplotlib inline
from matplotlib import rcParams
from matplotlib import colors
from matplotlib import pyplot as plt

# for computing neighborhood graph/clustering
import time
import sys
from math import log, ceil
from sklearn.metrics.pairwise import pairwise_distances
from sklearn.cluster import KMeans
from sklearn.metrics import adjusted_rand_score
import diffxpy.api as de

# setting the plots size scanpy
sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)
sc.logging.print_versions()
sc.settings.set_figure_params(dpi=100,fontsize=14)

cd /hpc/projects/genomics/shoshana/Smartseq2nd

adata = sc.read_h5ad('Immgen_IntegrateUMAP.h5ad')

adata

sc.pl.umap(adata, color=['topcells'], ncols=3, wspace=0.6)

sc.pl.umap(adata, color=['condition'], ncols=3, wspace=0.6)

adata.obs['condition_integrate'] = ''
for i in adata.obs.index:
    if adata.obs.loc[i, 'condition'] == 'bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Bystander'  
    elif adata.obs.loc[i, 'condition'] == 'control':
        adata.obs.loc[i, 'condition_integrate'] = 'Uninfected'   
    elif adata.obs.loc[i, 'condition'] == 'infected':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Infected'   
    elif adata.obs.loc[i, 'condition'] == 'KO_Bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'KO_Bystander'       
    elif adata.obs.loc[i, 'condition'] == 'KO_Infected':
        adata.obs.loc[i, 'condition_integrate'] = 'KO_Infected'    
    elif adata.obs.loc[i, 'condition'] == 'WT_Infected':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Infected'  
    elif adata.obs.loc[i, 'condition'] == 'WT_Bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Bystander'
    elif adata.obs.loc[i, 'condition'] == 'Uninfected':
        adata.obs.loc[i, 'condition_integrate'] = 'Uninfected'


sc.pl.umap(adata, color=['condition_integrate'], ncols=3, wspace=0.6)

infection_status_condition = (pd.crosstab(adata.obs['condition_integrate'], adata.obs['topcells'])).T
pd.DataFrame(infection_status_condition)


#sc.tl.rank_genes_groups(adata, 'topcells', method='wilcoxon')
#sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

#de_genes_df = pd.DataFrame(adata.uns['rank_genes_groups']['names'])
#de_genes_df.to_csv('DEcombatTopCells.csv')

# QC Graphs

sc.tl.pca(adata)
sc.pl.pca_overview(adata, color='plate_ID')

sc.tl.pca(adata)
sc.pl.pca_overview(adata, color='topcells')

# Subset

adataMac = adata[adata.obs.topcells.isin(['Macrophages','Mono_Mac', 'Dendritic cells'])]           
adataMac

sc.pl.umap(adataMac, color='topcells', title='', frameon=True)
sc.pl.umap(adataMac, color='condition_integrate', title='', frameon=True)
sc.pl.umap(adataMac, color='plate_ID', title='', frameon=True)


sc.pl.umap(adataMac, color='batch', title='', frameon=True)

adataMacNEW = adataMac[adataMac.obs.batch.isin(['new'])]           
adataMacNEW

sc.pl.umap(adataMacNEW, color='condition_integrate', title='', frameon=True)

sc.tl.pca(adataMacNEW)
sc.pl.pca_overview(adataMacNEW, color='condition')
sc.pl.pca_variance_ratio(adataMacNEW, n_pcs=50, log=True)

sc.pp.neighbors(adataMacNEW, n_neighbors=12, n_pcs=10)
#sc.tl.louvain(adataMacNEW, resolution = 0.2)
sc.tl.leiden(adataMacNEW, resolution = 0.2)

print('UMAP')
sc.tl.umap(adataMacNEW, random_state=47)
sc.pl.umap(adataMacNEW, color=['zsGreen', 'louvain','leiden', 'mCherry', 'condition'], ncols=3, wspace=0.6)


# mark the cell types

new_cluster_names = ['moDerived Macrophage', 'Immature_moDerived Macrophage','Alveolar Macrophage','MTBhi_Macrophage',
                     'Dendritic Cell', 'remove']
adataMacNEW.rename_categories('leiden', new_cluster_names)

sc.pl.umap(adataMacNEW, color='leiden', title='', frameon=True)

adataMacNEW.write_h5ad('adataMNPNEW_hpc.h5ad') 

adataMNPNEW_removeneutro = adataMacNEW[adataMacNEW.obs.leiden.isin(['moDerived Macrophage', 'Immature_moDerived Macrophage',
                                                                    'Alveolar Macrophage','MTBhi_Macrophage','Dendritic Cell'])]           
adataMNPNEW_removeneutro

sc.pl.umap(adataMNPNEW_removeneutro, color='leiden', title='', frameon=True)

# infection status table for all cells
infection_status_condition = (pd.crosstab(adataMacNEW.obs['condition'], adataMacNEW.obs['leiden'])).T
pd.DataFrame(infection_status_condition)

infection_status_condition = (pd.crosstab(adataMNPNEW_removeneutro.obs['condition'], adataMNPNEW_removeneutro.obs['leiden'])).T
pd.DataFrame(infection_status_condition)

sc.tl.rank_genes_groups(adataMNPNEW_removeneutro, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adataMNPNEW_removeneutro, n_genes=25, sharey=False)
de_genes_df = pd.DataFrame(adataMNPNEW_removeneutro.uns['rank_genes_groups']['names'])
de_genes_df.to_csv('adataMNPNEW_removeneutroHPC.csv')

#sc.pp.neighbors(adataMNPNEW_removeneutro, n_neighbors=10, n_pcs=10)
#sc.tl.louvain(adataMNPNEW_removeneutro, resolution = 0.4)
sc.tl.leiden(adataMNPNEW_removeneutro, resolution = 0.43)

print('UMAP')
#sc.tl.umap(adataMNPNEW_removeneutro, random_state=47)
sc.pl.umap(adataMNPNEW_removeneutro, color=['louvain','leiden', 'condition'], ncols=3, wspace=0.6)

sc.pl.umap(adataMNPNEW_removeneutro, color='leiden',legend_loc='on data', title='', frameon=True)


# scores

from matplotlib import pyplot as plt
sc.pl.scatter(adataMNPNEW_removeneutro,color='Mafb',legend_loc='none',color_map=plt.cm.Reds,size=5,basis='umap')

sc.pl.scatter(adataMNPNEW_removeneutro,color='Hif1a',legend_loc='none',color_map=plt.cm.Reds,size=5,basis='umap')


sc.pl.umap(adataMNPNEW_removeneutro, color=['Hif1a'], ncols=3, wspace=0.6, color_map='twilight_shifted')
sc.pl.umap(adataMNPNEW_removeneutro, color=['Mafb'], ncols=3, wspace=0.6, color_map='twilight_shifted')

sc.pl.umap(adataMNPNEW_removeneutro, color=['Notch2'], ncols=3, wspace=0.6, color_map='twilight_shifted')

sc.pl.umap(adataMNPNEW_removeneutro, color=['Hif1a'], ncols=3, wspace=0.6)

#M1
sc.tl.score_genes(adataMNPNEW_removeneutro, 
                      ['Clec4e','Nos2','Saa3','Slc7a2','Apoe','C1qa',
     'Ccl17','Ccl22','Zfp36',
     'Cd44','Sdc1','Fn1',
     'Adgre1','Csf1r','H2-Ab1','Cd68','Lyz2','Itgam','Mertk','Stat1'])
sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)


sc.tl.score_genes(adataMNPNEW_removeneutro, 
                      ['Il1a','Il1b','Il6','Il12a','Il12b','Il23a','Il27','Tnf','Csf3','Csf2','Nfkbiz','Ccl1','Cxcl13','Ccl11','Cxcl2','Soc2','Nos2'])
sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

#M2
sc.tl.score_genes(adataMNPNEW_removeneutro, 
                      ['Retnl','Clec10a','Ccl17','Ccl24','Ccl22','Irf4','Chil3','Arg1','Ccl8','Clec7a','Socs2','Pparg'])
sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

#phagosome formation
sc.tl.score_genes(adataMNPNEW_removeneutro, ['Fcgr3','Fcgr1','Itga4','Itgb2','Coro1a','Kras','Rac2',
                                             'Itgal','Rap1a','Rap1b'])
sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)


ex = ['Fcgr3','Coro1a','Nfkb1','Ifngr1','Ifngr2','Nos2','H2-Aa']
sc.pl.stacked_violin(adataMNPNEW_removeneutro, ex, groupby='leiden', rotation=90);


#production of NO ros
sc.tl.score_genes(adataMNPNEW_removeneutro, ['Apoe','Ifngr1','Ikbkb','Nfkb1','Tnfrsf1a','Tnfrsf1b','Map3k14',
                                            'Ncf2','Plcg2'])
sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

# oxidative phosphorylation
sc.tl.score_genes(adataMNPNEW_removeneutro, ['Cox5a','Cox6c','Cox7c','Ndufa12','Ndufc1','Ndufs7','Uqrcb','Ndufs3',
                                            'Atp5b','Atp6ap2','Prdx5', 'Txn1', 'Gsr', 
                                             'Ptgs2', 'Ccs', 'Prdx6', 'Gpx4', 'Sesn1', 'Sod3', 'Sod2',
                                             'Ltc4s', 'Cox6b1',])

sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

#necroptosis
sc.tl.score_genes(adataMNPNEW_removeneutro, ['Il1a', 'Ifng', 'Ifnb1', 'Stat1','Il1b','Stat2','H2ab1','Jak2',
                                            'Casp1','Ifnar1','Pycard','Sharpin','Slc25a3',
                                            'Timm17a','Timm23','Tnip1','Tomm20','Tomm22','Tomm40',
                                            'Tspo','Vdac1','Vdac2','Vdac3','Zbp1'])

sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

# Sannin monocyte
sc.tl.score_genes(adataMNPNEW_removeneutro, ['S100a4', 'Itgb7', 'Napsa', 'Cd300lg', 'Adora2b', 'Emb', 'Ly6c2', 'Ms4a4c', 
                                             'Fn1', 'Sell', 'Padi2', 'Lilra6', 'Ccnb2', 'Galnt9', 'Upb1', 'Lmo1', 
                                             'F13a1', 'Ccr2', 'Gm15987'])

sc.pl.umap(adataMNPNEW_removeneutro, color=['score'], ncols=3, wspace=0.6)

