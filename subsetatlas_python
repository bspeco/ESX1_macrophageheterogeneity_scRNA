# importing python modules
# (INSERT PACKAGES)
import numpy as np
import pandas as pd 
import scipy as sp
# pandas - creating dataframe
import scanpy as sc
# single cell package
from anndata import read_h5ad
import anndata
from plotnine import *
# graphing package 
from plotnine.data import mtcars 
import glob
# heat map
import seaborn as sns

# magic function, important for plotting
%matplotlib inline
from matplotlib import rcParams
from matplotlib import colors
from matplotlib import pyplot as plt

# for computing neighborhood graph/clustering
import time
import sys
from math import log, ceil
from sklearn.metrics.pairwise import pairwise_distances
from sklearn.cluster import KMeans
from sklearn.metrics import adjusted_rand_score
import diffxpy.api as de

# setting the plots size scanpy
sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)
sc.logging.print_versions()
sc.settings.set_figure_params(dpi=100,fontsize=14)

cd /hpc/projects/genomics/shoshana/Smartseq2nd

adata = sc.read_h5ad('Immgen_IntegrateUMAP.h5ad')

adata

sc.pl.umap(adata, color=['topcells'], ncols=3, wspace=0.6)

sc.pl.umap(adata, color=['condition'], ncols=3, wspace=0.6)

adata.obs['condition_integrate'] = ''
for i in adata.obs.index:
    if adata.obs.loc[i, 'condition'] == 'bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Bystander'  
    elif adata.obs.loc[i, 'condition'] == 'control':
        adata.obs.loc[i, 'condition_integrate'] = 'Uninfected'   
    elif adata.obs.loc[i, 'condition'] == 'infected':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Infected'   
    elif adata.obs.loc[i, 'condition'] == 'KO_Bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'KO_Bystander'       
    elif adata.obs.loc[i, 'condition'] == 'KO_Infected':
        adata.obs.loc[i, 'condition_integrate'] = 'KO_Infected'    
    elif adata.obs.loc[i, 'condition'] == 'WT_Infected':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Infected'  
    elif adata.obs.loc[i, 'condition'] == 'WT_Bystander':
        adata.obs.loc[i, 'condition_integrate'] = 'WT_Bystander'
    elif adata.obs.loc[i, 'condition'] == 'Uninfected':
        adata.obs.loc[i, 'condition_integrate'] = 'Uninfected'


sc.pl.umap(adata, color=['condition_integrate'], ncols=3, wspace=0.6)

infection_status_condition = (pd.crosstab(adata.obs['condition_integrate'], adata.obs['topcells'])).T
pd.DataFrame(infection_status_condition)


#sc.tl.rank_genes_groups(adata, 'topcells', method='wilcoxon')
#sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

#de_genes_df = pd.DataFrame(adata.uns['rank_genes_groups']['names'])
#de_genes_df.to_csv('DEcombatTopCells.csv')

# QC Graphs

sc.tl.pca(adata)
sc.pl.pca_overview(adata, color='plate_ID')

sc.tl.pca(adata)
sc.pl.pca_overview(adata, color='topcells')

# Subset

adataMac = adata[adata.obs.topcells.isin(['Macrophages','Mono_Mac', 'Dendritic cells'])]           
adataMac

sc.pl.umap(adataMac, color='topcells', title='', frameon=True)
sc.pl.umap(adataMac, color='condition_integrate', title='', frameon=True)
sc.pl.umap(adataMac, color='plate_ID', title='', frameon=True)


sc.pl.umap(adataMac, color='batch', title='', frameon=True)

adataMacNEW = adataMac[adataMac.obs.batch.isin(['new'])]           
adataMacNEW

sc.pl.umap(adataMacNEW, color='condition_integrate', title='', frameon=True)

sc.tl.pca(adataMacNEW)
sc.pl.pca_overview(adataMacNEW, color='condition')
sc.pl.pca_variance_ratio(adataMacNEW, n_pcs=50, log=True)

sc.pp.neighbors(adataMacNEW, n_neighbors=12, n_pcs=10)
#sc.tl.louvain(adataMacNEW, resolution = 0.2)
sc.tl.leiden(adataMacNEW, resolution = 0.2)

print('UMAP')
sc.tl.umap(adataMacNEW, random_state=47)
sc.pl.umap(adataMacNEW, color=['zsGreen', 'louvain','leiden', 'mCherry', 'condition'], ncols=3, wspace=0.6)


# mark the cell types

new_cluster_names = ['moDerived Macrophage', 'Immature_moDerived Macrophage','Alveolar Macrophage','MTBhi_Macrophage',
                     'Dendritic Cell', 'remove']
adataMacNEW.rename_categories('leiden', new_cluster_names)

sc.pl.umap(adataMacNEW, color='leiden', title='', frameon=True)

adataMacNEW.write_h5ad('adataMNPNEW_hpc.h5ad') 

adataMNPNEW_removeneutro = adataMacNEW[adataMacNEW.obs.leiden.isin(['moDerived Macrophage', 'Immature_moDerived Macrophage',
                                                                    'Alveolar Macrophage','MTBhi_Macrophage','Dendritic Cell'])]           
adataMNPNEW_removeneutro

sc.pl.umap(adataMNPNEW_removeneutro, color='leiden', title='', frameon=True)

# infection status table for all cells
infection_status_condition = (pd.crosstab(adataMacNEW.obs['condition'], adataMacNEW.obs['leiden'])).T
pd.DataFrame(infection_status_condition)

infection_status_condition = (pd.crosstab(adataMNPNEW_removeneutro.obs['condition'], adataMNPNEW_removeneutro.obs['leiden'])).T
pd.DataFrame(infection_status_condition)

sc.tl.rank_genes_groups(adataMNPNEW_removeneutro, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adataMNPNEW_removeneutro, n_genes=25, sharey=False)
de_genes_df = pd.DataFrame(adataMNPNEW_removeneutro.uns['rank_genes_groups']['names'])
de_genes_df.to_csv('adataMNPNEW_removeneutroHPC.csv')

#sc.pp.neighbors(adataMNPNEW_removeneutro, n_neighbors=10, n_pcs=10)
#sc.tl.louvain(adataMNPNEW_removeneutro, resolution = 0.4)
sc.tl.leiden(adataMNPNEW_removeneutro, resolution = 0.43)

print('UMAP')
#sc.tl.umap(adataMNPNEW_removeneutro, random_state=47)
sc.pl.umap(adataMNPNEW_removeneutro, color=['louvain','leiden', 'condition'], ncols=3, wspace=0.6)

sc.pl.umap(adataMNPNEW_removeneutro, color='leiden',legend_loc='on data', title='', frameon=True)



adataWTINFECTED = adataMNPNEW_removeneutro[adataMNPNEW_removeneutro.obs.condition.isin(['WT_Infected','WT_Bystander'])]           
adataWTINFECTED

sc.pl.umap(adataWTINFECTED, color='leiden', title='', frameon=True)

adataKO = adataMNPNEW_removeneutro[adataMNPNEW_removeneutro.obs.condition.isin(['KO_Infected','KO_Bystander'])]           
adataKO

sc.pl.umap(adataKO, color='leiden', title='', frameon=True)
sc.pl.umap(adataKO, color='condition', title='', frameon=True)

adataUninfected = adataMNPNEW_removeneutro[adataMNPNEW_removeneutro.obs.condition.isin(['Uninfected'])]           
adataUninfected

sc.pl.umap(adataUninfected, color='leiden', title='', frameon=True)
sc.pl.umap(adataUninfected, color='condition', title='', frameon=True)
